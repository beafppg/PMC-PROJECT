    public void asignaPrioridad(Set<Id> AsignaPrioridad,Set<Id> tiendaPOS){
        
        this.AsignaPrioridad    = AsignaPrioridad;
        this.tiendaPOS          = tiendaPOS;
        
           //Declaración de variables 
           Map<id,Tienda__c>                 tiendasMap             = new Map<id,Tienda__c>();
           List<Case>                                casos                      = new List<Case>();
           List<Tienda__c>                       tiendas                    = new List<Tienda__c>();
           List<Tipos_de_problema__c>  problemas            = new List<Tipos_de_problema__c>();
           Set<Id>                                   idTiendas              = new Set<Id>();
           List<Case>                                updateCasos            = new List<Case>();
           List<Case>                                actualizaPrioridad  = new List<Case>();
           //Se crean consultas cuando la clase se ejecute por una clase de test
           if(Test.isRunningTest()){
                casos           = ([select Id, TipoProblema__c, Priority, Clasificacion__c, NoTienda__c, PointOfSales__c , Area_Asignacion__c from Case where Id=:AsignaPrioridad]);
                problemas   = ([select Id, Tipo_de_producto__c, Tipo_de_problema__c, Categoria__c, Prioridad__c, POS__c from Tipos_de_problema__c]);
                tiendas     = ([Select POS__c, Zona_GR__c, name from Tienda__c where id =: tiendaPOS]);
            }
             else{
                casos           = ([select Id, TipoProblema__c, Priority, Clasificacion__c, NoTienda__c, PointOfSales__c , Area_Asignacion__c from Case where Id=:AsignaPrioridad]);
                problemas   = ([select Id, Tipo_de_problema__c, Categoria__c, Prioridad__c, POS__c from Tipos_de_problema__c]);
                tiendas     = ([Select POS__c, Zona_GR__c,name from Tienda__c where id =: tiendaPOS]);
             }
             //Recorremos la lista de tiendas y las agregamos a un mapa para posteriormente hacer la asignación de POS
             for(Tienda__c td : tiendas){
                tiendasMap.put(td.id,td);
             }
           //Se recorren todos los casos en ejecucion y se les Asigna el POS, en caso de ya tener un POS no entra a la asignación
           if(casos.size()>0){
                   for(Case cs : casos){
                    if(cs.PointOfSales__c == null || cs.PointOfSales__c == ''){
                        if( tiendasMap.get(cs.NoTienda__c).POS__c == null || tiendasMap.get(cs.NoTienda__c).POS__c == '' ){
                            system.assertEquals(null,'--NO ES POSIBLE REGISTRAR UN CASO A UNA TIENDA SIN POS. ES NECESARIO CONTACTAR A SU ADMINISTRADOR LOCAL.--');
                        }else{
                            if(cs.PointOfSales__c == null || cs.PointOfSales__c == ''){
                                cs.PointOfSales__c = tiendasMap.get(cs.NoTienda__c).POS__c;
                            }
                        }
                        if(tiendasMap.get(cs.NoTienda__c).Zona_GR__c == null || tiendasMap.get(cs.NoTienda__c).Zona_GR__c == ''){
                            system.assertEquals(null,'--NO ES POSIBLE REGISTRAR UN CASO A UNA TIENDA SIN ZONA GR. ES NECESARIO CONTACTAR A SU ADMINISTRADOR LOCAL.--');
                        }
                    }
                    for(Tipos_de_problema__c tp : problemas){   
                        if(cs.TipoProblema__c == tp.Id){
                            if(cs.PointOfSales__c != tp.POS__c){System.assertEquals(null,'--EL TIPO DE PROBLEMA NO CORRESPONDE AL SISTEMA DEL POS DE LA TIENDA--');}
                            else{
                                cs.Priority = tp.Prioridad__c;
                                cs.Clasificacion__c = tp.Categoria__c;
                                actualizaPrioridad.add(cs);
                            }
                        }
                    }
                    }if(actualizaPrioridad.size()>0){update actualizaPrioridad;}
           }
    }
