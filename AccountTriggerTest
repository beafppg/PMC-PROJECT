@isTest
private class AccountTriggerTest
{
  @TestSetup
  private static void setup() {

    UserRole ur = [select Id from userrole where name = 'Global Senior Leadership Team' limit 1];
      Profile up = [select Id from profile where name = 'PPG PMC System Admin' limit 1];
      User nUser = new User(
          FirstName = 'Deploy',
          LastName = 'User1',
          alias = 'testu1',
          email = 'drod@summa.com',
          username = 'drod@ppg.com',
          userroleId = ur.Id,
          profileId = up.Id,
          languagelocalekey = 'en_US',
          localesIdkey = 'en_US',
          emailencodingkey = 'UTF-8',
          timezonesIdkey = 'America/Los_Angeles',
          IsActive = true
        );
        insert nUser;
  }

  @isTest
  private static void itShouldSetSyncFlagForNewBuyingAccount_OnInsert() {
    // Given an appropriate user and a new buying account
    List<User> availableUsers = [SELECT Id, Sales_Rep_ID__c FROM User WHERE Sales_Rep_ID__c != NULL AND IsActive != null];
    System.assert(availableUsers != null);
    System.assert(availableUsers.size() > 0);
    User runningUser = availableUsers[0];
    Account a = createNewBuyingAccount(false);

    // When an account is inserted.
    Test.startTest();
    System.runAs(runningUser) {
        insert a;
      }
    Test.stopTest();

    // Then
    List<Account> accts = [SELECT Id, Synch_Required__c FROM Account WHERE Name = 'Test Account1' LIMIT 1];
    System.assert(accts != null);
    System.assert(accts.size() > 0);
    Account acct = accts[0];

    System.assertEquals(true, acct.Synch_Required__c);
  }

  @isTest
  private static void itShouldNOTSetSyncFlagForBuyingAccount_OnInsert() {
    // Given an appropriate user and a new buying account
    List<User> availableUsers = [SELECT Id, Sales_Rep_ID__c FROM User WHERE Sales_Rep_ID__c != NULL AND IsActive != null];
    System.assert(availableUsers != null);
    System.assert(availableUsers.size() > 0);
    User runningUser = availableUsers[0];
    Account a = createBuyingAccount(false);

    // When an account is inserted.
    Test.startTest();
    System.runAs(runningUser) {
        insert a;
      }
    Test.stopTest();

    // Then
    List<Account> accts = [SELECT Id, Synch_Required__c FROM Account WHERE Name = 'Test Account1' LIMIT 1];
    System.assert(accts != null);
    System.assert(accts.size() > 0);
    Account acct = accts[0];

    System.assertEquals(false, acct.Synch_Required__c);
  }

  @isTest
  private static void itShouldSetSyncFlagForNewBuyingAccount_OnUpdate() {

    // Given a user and a new buying account (inserted)
    List<User> availableUsers = [SELECT Id, Sales_Rep_ID__c FROM User WHERE Sales_Rep_ID__c = NULL AND email = 'drod@summa.com' LIMIT 1];
    System.assert(availableUsers != null);
    System.assert(availableUsers.size() > 0);
    User runningUser = availableUsers[0];
      Account a = createNewBuyingAccount(false);
      a.OwnerId = runningUser.Id;
      insert a;
      a = [SELECT Id, Synch_Required__c FROM Account WHERE Id = :a.Id LIMIT 1];
      System.assertEquals(false, a.Synch_Required__c);

    // When the user gets a new sales_rep_Id...
    Test.startTest();
    System.runAs(runningUser) {
      runningUser.Sales_Rep_ID__c = 'XXXX';
      update runningUser;
      }
    Test.stopTest();

    // Then
    List<Account> accts = [SELECT Id, Synch_Required__c FROM Account WHERE Name = 'Test Account1' LIMIT 1];
    System.assert(accts != null);
    System.assert(accts.size() > 0);
    Account acct = accts[0];

    System.assertEquals(true, acct.Synch_Required__c);
  }

  @isTest
  private static void itShouldNOTSetSyncFlagForBuyingAccount_OnUpdate() {

    // Given a user and a new buying account (inserted)
    List<User> availableUsers = [SELECT Id, Sales_Rep_ID__c FROM User WHERE Sales_Rep_ID__c = NULL AND email = 'drod@summa.com' LIMIT 1];
    System.assert(availableUsers != null);
    System.assert(availableUsers.size() > 0);
    User runningUser = availableUsers[0];
      Account a = createBuyingAccount(false);
      a.OwnerId = runningUser.Id;
      insert a;
      a = [SELECT Id, Synch_Required__c FROM Account WHERE Id = :a.Id LIMIT 1];
      System.assertEquals(false, a.Synch_Required__c);

    // When the user gets a new sales_rep_Id...
    Test.startTest();
    System.runAs(runningUser) {
      runningUser.Sales_Rep_ID__c = 'XXXX';
      update runningUser;
      }
    Test.stopTest();

    // Then
    List<Account> accts = [SELECT Id, Synch_Required__c FROM Account WHERE Name = 'Test Account1' LIMIT 1];
    System.assert(accts != null);
    System.assert(accts.size() > 0);
    Account acct = accts[0];

    System.assertEquals(false, acct.Synch_Required__c);
  }

  @isTest
  private static void itShouldSetSubSegmentOnCustomerGroupSet() {
    // Given an appropriate user and a new buying account
    List<User> availableUsers = [SELECT Id, Sales_Rep_ID__c FROM User WHERE Sales_Rep_ID__c = NULL AND email = 'drod@summa.com' LIMIT 1];
    System.assert(availableUsers != null);
    System.assert(availableUsers.size() > 0);
    User runningUser = availableUsers[0];
        Lookup__c lkup = new Lookup__c(Name = 'Transportation Moveable Assets', Customer_Classification__c = 'SCG_87', SAP_Code__c = '87', SAP_Code_Type__c = 'Customer Group');
        insert lkup;

    Account a = null;
    System.runAs(runningUser) {
        a = createNewBuyingAccount(true);
      }

    // When the Customer Group Lookup field is set
    Test.startTest();

    Account updateAcct = new Account(Id = a.Id, Customer_Group__c = lkup.Id);
    update updateAcct;

    Test.stopTest();

    // Then the sub-segment should be updated to match.
    updateAcct = [SELECT Id, Industry, Segmento__c FROM Account WHERE Id = :updateAcct.Id LIMIT 1];
    System.assertEquals('Transportation Moveable Assets', updateAcct.Segmento__c);
    System.assertEquals('Infrastructure', updateAcct.Industry);
  }

  @isTest
  private static void itShouldNOTSetSubSegmentOnCustomerGroupSetWithWrongAccountRT() {
    // Given an appropriate user and a non buying account
    List<User> availableUsers = [SELECT Id, Sales_Rep_ID__c FROM User WHERE Sales_Rep_ID__c = NULL AND email = 'drod@summa.com' LIMIT 1];
    System.assert(availableUsers != null);
    System.assert(availableUsers.size() > 0);
    User runningUser = availableUsers[0];
        Lookup__c lkup = new Lookup__c(Name = 'Transportation Moveable Assets', Customer_Classification__c = 'SCG_87', SAP_Code__c = '87', SAP_Code_Type__c = 'Customer Group');
        insert lkup;

    Account a = null;
    System.runAs(runningUser) {
        a = createNonBuyingAccount(true);
      }

    // When the Customer Group Lookup field is set
    Test.startTest();

    Account updateAcct = new Account(Id = a.Id, Customer_Group__c = lkup.Id);
    update updateAcct;

    Test.stopTest();

    // Then the sub-segment should NOT be updated to match.
    updateAcct = [SELECT Id, Industry, Segmento__c FROM Account WHERE Id = :updateAcct.Id LIMIT 1];
    System.assertNotEquals('Transportation Moveable Assets', updateAcct.Segmento__c);
    System.assertNotEquals('Infrastructure', updateAcct.Industry);
  }

  @isTest
  private static void itShouldSetCustomerGroupOnSubSegmentSet() {
    // Given an appropriate user and a new buying account
    List<User> availableUsers = [SELECT Id, Sales_Rep_ID__c FROM User WHERE Sales_Rep_ID__c = NULL AND email = 'drod@summa.com' LIMIT 1];
    System.assert(availableUsers != null);
    System.assert(availableUsers.size() > 0);
    User runningUser = availableUsers[0];
        Lookup__c lkup = new Lookup__c(Name = 'Transportation Moveable Assets', Customer_Classification__c = 'SCG_87', SAP_Code__c = '87', SAP_Code_Type__c = 'Customer Group');
        insert lkup;

    // When the Customer Group Lookup field is set
    Test.startTest();

    Account a = createNewBuyingAccount(false);
    a.Industry = 'Infrastructure';
    a.Segmento__c = 'Transportation Moveable Assets';
    insert a;

    Test.stopTest();

    // Then the sub-segment should be updated to match.
    a = [SELECT Id, Customer_Group__c FROM Account WHERE Id = :a.Id LIMIT 1];
    System.assertEquals(lkup.Id, a.Customer_Group__c);
  }

  @isTest
  private static void itShouldNOTSetCustomerGroupOnSubSegmentSetWithWrongAccountRT() {
    // Given an appropriate user and a non buying account
    List<User> availableUsers = [SELECT Id, Sales_Rep_ID__c FROM User WHERE Sales_Rep_ID__c = NULL AND email = 'drod@summa.com' LIMIT 1];
    System.assert(availableUsers != null);
    System.assert(availableUsers.size() > 0);
    User runningUser = availableUsers[0];
        Lookup__c lkup = new Lookup__c(Name = 'Transportation Moveable Assets', Customer_Classification__c = 'SCG_87', SAP_Code__c = '87', SAP_Code_Type__c = 'Customer Group');
        insert lkup;

    // When the Customer Group Lookup field is set
    Test.startTest();

    Account a = createNonBuyingAccount(false);
    a.Industry = 'Infrastructure';
    a.Segmento__c = 'Transportation Moveable Assets';
    insert a;

    Test.stopTest();

    // Then the sub-segment should NOT be updated to match.
    a = [SELECT Id, Customer_Group__c FROM Account WHERE Id = :a.Id LIMIT 1];
    System.assertNotEquals(lkup.Id, a.Customer_Group__c);
  }

  @isTest
  private static void itShouldSetAccountTypeOnCustomerClassificationSet() {
    // Given an appropriate user and a new buying account
    List<User> availableUsers = [SELECT Id, Sales_Rep_ID__c FROM User WHERE Sales_Rep_ID__c = NULL AND email = 'drod@summa.com' LIMIT 1];
    System.assert(availableUsers != null);
    System.assert(availableUsers.size() > 0);
    User runningUser = availableUsers[0];
        Lookup__c lkup = new Lookup__c(Name = 'Applicator', Customer_Classification__c = 'SCC_87', SAP_Code__c = '87', SAP_Code_Type__c = 'Customer Classification');
        insert lkup;

    Account a = null;
    System.runAs(runningUser) {
        a = createNewBuyingAccount(true);
      }

    // When the Customer Classification Lookup field is set
    Test.startTest();

    Account updateAcct = new Account(Id = a.Id, Customer_Classification__c = lkup.Id);
    update updateAcct;

    Test.stopTest();

    // Then the Account Type should be updated to match.
    updateAcct = [SELECT Id, Account_Type__c FROM Account WHERE Id = :updateAcct.Id LIMIT 1];
    System.assertEquals('Applicator', updateAcct.Account_Type__c);
  }

  @isTest
  private static void itShouldNOTSetAccountTypeOnCustomerClassificationSetWithWrongAccountRT() {
    // Given an appropriate user and a non buying account
    List<User> availableUsers = [SELECT Id, Sales_Rep_ID__c FROM User WHERE Sales_Rep_ID__c = NULL AND email = 'drod@summa.com' LIMIT 1];
    System.assert(availableUsers != null);
    System.assert(availableUsers.size() > 0);
    User runningUser = availableUsers[0];
        Lookup__c lkup = new Lookup__c(Name = 'Applicator', Customer_Classification__c = 'SCC_87', SAP_Code__c = '87', SAP_Code_Type__c = 'Customer Classification');
        insert lkup;

    Account a = null;
    System.runAs(runningUser) {
        a = createNonBuyingAccount(true);
      }

    // When the Customer Classification Lookup field is set
    Test.startTest();

    Account updateAcct = new Account(Id = a.Id, Customer_Classification__c = lkup.Id);
    update updateAcct;

    Test.stopTest();

    // Then the Account Type should NOT be updated to match.
    updateAcct = [SELECT Id, Account_Type__c FROM Account WHERE Id = :updateAcct.Id LIMIT 1];
    System.assertNotEquals('Applicator', updateAcct.Account_Type__c);
  }

  @isTest
  private static void itShouldSetCustomerClassificationOnAccountTypeSet() {
    // Given an appropriate user and a new buying account
        Lookup__c lkup = new Lookup__c(Name = 'Applicator', Customer_Classification__c = 'SCC_87', SAP_Code__c = '87', SAP_Code_Type__c = 'Customer Classification');
        insert lkup;

    // When the Account Type field is set
    Test.startTest();

    Account a = createNewBuyingAccount(false);
    a.Account_Type__c = 'Applicator';
    insert a;

    Test.stopTest();

    // Then the Customer Classification should be updated to match.
    a = [SELECT Id, Customer_Classification__c FROM Account WHERE Id = :a.Id LIMIT 1];
    System.assertEquals(lkup.Id, a.Customer_Classification__c);
  }

  @isTest
  private static void itShouldNOTSetCustomerClassificationOnAccountTypeSetWithWrongAccountRT() {
    // Given an appropriate user and a non buying account
        Lookup__c lkup = new Lookup__c(Name = 'Applicator', Customer_Classification__c = 'SCC_87', SAP_Code__c = '87', SAP_Code_Type__c = 'Customer Classification');
        insert lkup;

    // When the Account Type field is set
    Test.startTest();

    Account a = createNonBuyingAccount(false);
    a.Account_Type__c = 'Applicator';
    insert a;

    Test.stopTest();

    // Then the Customer Classification should NOT be updated to match.
    a = [SELECT Id, Customer_Classification__c FROM Account WHERE Id = :a.Id LIMIT 1];
    System.assertNotEquals(lkup.Id, a.Customer_Classification__c);
  }

  @isTest
  private static void itShouldDeleteAccountWithoutError() {

    // Given a user and a new buying account (inserted)
    List<User> availableUsers = [SELECT Id, Sales_Rep_ID__c FROM User WHERE Sales_Rep_ID__c = NULL AND email = 'drod@summa.com' LIMIT 1];
    System.assert(availableUsers != null);
    System.assert(availableUsers.size() > 0);
    User runningUser = availableUsers[0];
      Account a = createBuyingAccount(false);
      a.OwnerId = runningUser.Id;
      insert a;
      a = [SELECT Id, Synch_Required__c FROM Account WHERE Id = :a.Id LIMIT 1];

    Test.startTest();
    delete a;
    Test.stopTest();

    // Then we should get here without error

    System.assert(true);
  }

  private static Account createNewBuyingAccount(Boolean shouldInsert) {
    RecordTypeUtil rtu = RecordTypeUtil.getInstance();
    Id newBuyingTypeId = rtu.getRecordTypeByName('Account-New_Buying').Id;
    Account a = new Account(Name = 'Test Account1', RecordTypeId = newBuyingTypeId, BillingStreet = '123 Main st', BillingCity = 'Pittsburgh', BillingCountryCode = 'US', BillingStateCode = 'PA', BillingPostalCode = '15222');
    if (shouldInsert) {
      insert a;
    }

    return a;
  }

  private static Account createNonBuyingAccount(Boolean shouldInsert) {
    RecordTypeUtil rtu = RecordTypeUtil.getInstance();
    Id nonBuyingTypeId = rtu.getRecordTypeByName('Account-Non_Buying').Id;
    Account a = new Account(Name = 'Test Account1', RecordTypeId = nonBuyingTypeId, BillingStreet = '123 Main st', BillingCity = 'Pittsburgh', BillingStateCode = 'PA', BillingPostalCode = '15222', BillingCountryCode = 'US');
    if (shouldInsert) {
      insert a;
    }

    return a;
  }

  private static Account createBuyingAccount(Boolean shouldInsert) {
    RecordTypeUtil rtu = RecordTypeUtil.getInstance();
    Id nonBuyingTypeId = rtu.getRecordTypeByName('Account-Buying').Id;
    Account a = new Account(Name = 'Test Account1', RecordTypeId = nonBuyingTypeId, BillingStreet = '123 Main st', BillingCity = 'Pittsburgh', BillingStateCode = 'PA', BillingPostalCode = '15222', BillingCountryCode = 'US');
    if (shouldInsert) {
      insert a;
    }

    return a;
  }

}
