/********************************************************************************
*   Desarrollado por:       Freeway Premium Outsorcing                                             *
*   Autor:                  Eduardo Godinez Loza                                *
*   Proyecto:               Plexus                                              *
*   Descripción:            Clase de test para trigger  Actividades*
*                                                                               *   
*   Cambios (Versiones)                                                         *
*   --------------------------------------------------------------------------  *
*   No.     Fecha               Autor                   Descripción             *
*   ------  ----------  ----------------------      --------------------------- *
*   1.0     30-11-2016   Eduardo Godinez Loza(EGL)       Creación clase tst       *
*********************************************************************************/
@isTest
private class ActividadesPlexus_tst {

    static User Admin;
    static User AgenteP;
    static User Agente;
    static Map<String,Profile> profileMap;
    static Map<String,UserRole> roleMap;
    static{
        profileMap = new Map<String,Profile>();
        for(Profile prof:[select Id, Name from Profile])profileMap.put(prof.Name,prof);
        
        roleMap = new Map<String, UserRole>();
        for(UserRole role:[select Id, Name from UserRole]) roleMap.put(role.Name,role);
    }
      static void iniciar (){
        Admin = new User(
                Alias = 'userP1',
                Email='userP1@ppg.tst.deploy.com',
                EmailEncodingKey='ISO-8859-1',
                LastName='userP1',
                LanguageLocaleKey='en_US',
                LocaleSidKey='en_US',
                UserRoleId = roleMap.get('ADMIN TI').Id, 
                TimeZoneSidKey='America/Mexico_City',
                UserName='userP1@ppg.tst.deploy.com',
                IsActive=true
        );
       if(UserInfo.getLanguage() == 'es'){Admin.ProfileId = profileMap.get('Administrador del sistema').Id;}
              else{Admin.ProfileId = profileMap.get('System Administrator').Id;}   
        insert Admin;
    }
      static void iniciarAgentePlexus (){
        AgenteP = new User(
                Alias = 'userP',
                Email='usuarioP@ppg.tst.deploy.com',
                EmailEncodingKey='ISO-8859-1',
                LastName='usuarioP',
                LanguageLocaleKey='en_US',
                LocaleSidKey='en_US',
                UserRoleId = roleMap.get('Agente Plexus Capacitación').Id, 
                TimeZoneSidKey='America/Mexico_City',
                UserName='usuarioP@ppg.tst.deploy.com',
                ProfileId = profileMap.get('Agente plexus').Id,
                IsActive=true
        );
        insert AgenteP;
    }
   static testMethod void actividad(){
    iniciar();
    Test.startTest();
            RecordType TRegistroTienda = [select Id from RecordType where  sObjectType='Tienda__c' AND Name='Plexus'];
             RecordType TRegistro = [select Id from RecordType where  sObjectType='Case' AND Name='Plexus'];
    system.runAs(Admin){
        
            Tipos_de_problema__c tp0 = new Tipos_de_problema__c();
            tp0.Tipo_de_producto__c = 'Producto0';
            tp0.Tipo_de_problema__c = 'Problema0';
            tp0.Prioridad__c = 'Alta';
            tp0.Categoria__c = 'Solicitud';
            tp0.POS__c = 'Plexus';
            insert tp0;
        
            Tipos_de_problema__c tp1 = new Tipos_de_problema__c();
            tp1.Tipo_de_producto__c = 'Producto1';
            tp1.Tipo_de_problema__c = 'Problema1';
            tp1.Prioridad__c = 'Alta';
            tp1.Categoria__c = 'Solicitud';
            tp1.POS__c = 'Front';
            insert tp1;
                
            Tienda__c tienda = new Tienda__c ();
            tienda.RecordTypeId = TRegistroTienda.Id;
            tienda.Name = '0947';
            tienda.POS__c = 'Plexus';
            tienda.Zona_GR__c = 'Metro'; 
             
            insert tienda;
            
            Case caso = new Case();
            caso.RecordTypeId = TRegistro.Id;
            caso.NoTienda__c = tienda.Id;
            caso.Clasificacion__c = 'Solicitud';
            caso.Area_Asignacion__c = 'Soporte';
            caso.Priority = 'Alta';
            caso.TipoProblema__c = tp0.Id;
            caso.TramoDescripcion__c = 'Tramo de descripción';
            caso.Fecha_Hora_del_evento__c = Date.today();
            caso.Pasos_evento__c = 'Pasos del evento a replicar';
            caso.Resultado_esperado__c = 'Resultado esperado';
            caso.PointOfSales__c = tienda.POS__c;
            insert caso;
            
            caso.Validador__c = 'Validador__c';
            caso.Soluciondelcaso__c = 'Soluciondelcaso__c';
            
            try{ update caso;}catch(Exception e){system.debug('error tst:'+e);}
            
            Actividades_Plexus__c actividad = new Actividades_Plexus__c();
            actividad.Numero_de_Caso__c = caso.Id;
            actividad.area__c = 'Aplicaciones';
            actividad.TipoProblema__c = tp0.Id;
            actividad.Tramo_de_descripcion_actividad__c = 'Tramo de descripción actividad';
            actividad.Fecha_Hora_del_evento__c = Date.today();
            actividad.Pasos_evento__c = 'Pasos para replicar el evento';
            actividad.Resultado_esperado__c = 'Resultado esperado';
            actividad.Numero_de_Bug__c = '1234567890';
            
            try{insert actividad;}catch(Exception e){system.debug('error tst:'+e);}
    }
        Test.stoptest();
   }

   static testMethod void actCambiosEtapas(){
    iniciarAgentePlexus();
    iniciar();
    Test.startTest();
            
    system.runAs(Admin){
            RecordType TRegistroTienda = [select Id from RecordType where  sObjectType='Tienda__c' AND Name='Plexus'];
             RecordType TRegistro = [select Id from RecordType where  sObjectType='Case' AND Name='Plexus'];
            
            Tipos_de_problema__c tp0 = new Tipos_de_problema__c();
            tp0.Tipo_de_producto__c = 'Producto0';
            tp0.Tipo_de_problema__c = 'Problema0';
            tp0.Prioridad__c = 'Alta';
            tp0.Categoria__c = 'Solicitud';
            tp0.POS__c = 'Plexus';
            insert tp0;
        
            Tipos_de_problema__c tp1 = new Tipos_de_problema__c();
            tp1.Tipo_de_producto__c = 'Producto1';
            tp1.Tipo_de_problema__c = 'Problema1';
            tp1.Prioridad__c = 'Alta';
            tp1.Categoria__c = 'Solicitud';
            tp1.POS__c = 'Front';
            insert tp1;
                
            Tienda__c tienda = new Tienda__c ();
            tienda.RecordTypeId = TRegistroTienda.Id;
            tienda.Name = '0947';
            tienda.POS__c = 'Plexus';
            tienda.Zona_GR__c = 'Metro'; 
             
            insert tienda;
            Case caso = new Case();
            caso.RecordTypeId = TRegistro.Id;
            caso.NoTienda__c = tienda.Id;
            caso.Clasificacion__c = 'Solicitud';
            caso.Area_Asignacion__c = 'Soporte';
            caso.Priority = 'Alta';
            caso.TipoProblema__c = tp0.Id;
            caso.TramoDescripcion__c = 'Tramo de descripción';
            caso.Fecha_Hora_del_evento__c = Date.today();
            caso.Pasos_evento__c = 'Pasos del evento a replicar';
            caso.Resultado_esperado__c = 'Resultado esperado';
            //caso.PointOfSales__c = tienda.POS__c;
            insert caso;
            
            Actividades_Plexus__c actividad = new Actividades_Plexus__c();
            actividad.Numero_de_Caso__c = caso.Id;
            actividad.area__c = 'Aplicaciones';
            actividad.TipoProblema__c = tp0.Id;
            actividad.Tramo_de_descripcion_actividad__c = 'Tramo de descripción actividad';
            actividad.Fecha_Hora_del_evento__c = Date.today();
            actividad.Pasos_evento__c = 'Pasos para replicar el evento';
            actividad.Resultado_esperado__c = 'Resultado esperado';
            actividad.Numero_de_Bug__c = '1234567890';
            
            insert actividad;
            system.runAs(AgenteP){
                actividad.Estatus__c = 'Reincidencia';
                  try{ update actividad;}catch(Exception e){system.debug('Error tst'+e);}
            }
            actividad.Estatus__c = 'Resuelto';
            update actividad;
            
            system.runAs(AgenteP){
                actividad.Estatus__c = 'En proceso';
                  try{ update actividad;}catch(Exception e){system.debug('Error tst'+e);}
            }
            system.runAs(AgenteP){
                actividad.Estatus__c = 'Rechazado';
                  try{ update actividad;}catch(Exception e){system.debug('Error tst'+e);}
            }
            system.runAs(AgenteP){
                 actividad.Resultado_esperado__c = 'direccionIP';
                  try{ update actividad;}catch(Exception e){system.debug('Error tst'+e);}
            }
    }
    Test.stopTest();
   }
    static testMethod void actBloqueado(){
    iniciarAgentePlexus();
    iniciar();
    Test.startTest();
            
    system.runAs(Admin){
            RecordType TRegistroTienda = [select Id from RecordType where  sObjectType='Tienda__c' AND Name='Plexus'];
             RecordType TRegistro = [select Id from RecordType where  sObjectType='Case' AND Name='Plexus'];
            
            Tipos_de_problema__c tp0 = new Tipos_de_problema__c();
            tp0.Tipo_de_producto__c = 'Producto0';
            tp0.Tipo_de_problema__c = 'Problema0';
            tp0.Prioridad__c = 'Alta';
            tp0.Categoria__c = 'Solicitud';
            tp0.POS__c = 'Plexus';
            insert tp0;
        
            Tipos_de_problema__c tp1 = new Tipos_de_problema__c();
            tp1.Tipo_de_producto__c = 'Producto1';
            tp1.Tipo_de_problema__c = 'Problema1';
            tp1.Prioridad__c = 'Alta';
            tp1.Categoria__c = 'Solicitud';
            tp1.POS__c = 'Front';
            insert tp1;
                
            Tienda__c tienda = new Tienda__c ();
            tienda.RecordTypeId = TRegistroTienda.Id;
            tienda.Name = '0947';
            tienda.POS__c = 'Plexus';
            tienda.Zona_GR__c = 'Metro'; 
             
            insert tienda;
            Case caso = new Case();
            caso.RecordTypeId = TRegistro.Id;
            caso.NoTienda__c = tienda.Id;
            caso.Clasificacion__c = 'Solicitud';
            caso.Area_Asignacion__c = 'Soporte';
            caso.Priority = 'Alta';
            caso.TipoProblema__c = tp0.Id;
            caso.TramoDescripcion__c = 'Tramo de descripción';
            caso.Fecha_Hora_del_evento__c = Date.today();
            caso.Pasos_evento__c = 'Pasos del evento a replicar';
            caso.Resultado_esperado__c = 'Resultado esperado';
            caso.PointOfSales__c = tienda.POS__c;
            insert caso;
            
            Actividades_Plexus__c actividad = new Actividades_Plexus__c();
            actividad.Numero_de_Caso__c = caso.Id;
            actividad.area__c = 'Aplicaciones';
            actividad.TipoProblema__c = tp0.Id;
            actividad.Tramo_de_descripcion_actividad__c = 'Tramo de descripción actividad';
            actividad.Fecha_Hora_del_evento__c = Date.today();
            actividad.Pasos_evento__c = 'Pasos para replicar el evento';
            actividad.Resultado_esperado__c = 'Resultado esperado';
            actividad.Numero_de_Bug__c = '1234567890';
            
            insert actividad;
            
            actividad.Estatus__c = 'Resuelto';
            update actividad;
            system.runAs(AgenteP){
                 actividad.CreacionAutomaticaCL__c = true;
                 try{ update actividad;}catch(Exception e){system.debug('Error tst'+e);}
            }
            system.runAs(AgenteP){
                 actividad.Resultado_esperado__c = 'Direccion_IP__c';
                try{ update actividad;}catch(Exception e){system.debug('Error tst'+e);}
            }
    }
    Test.stopTest();
   }
    static testMethod void actCaso(){
    iniciarAgentePlexus();
    iniciar();
    Test.startTest();
            
    system.runAs(Admin){
            RecordType TRegistroTienda = [select Id from RecordType where  sObjectType='Tienda__c' AND Name='Plexus'];
             RecordType TRegistro = [select Id from RecordType where  sObjectType='Case' AND Name='Plexus'];
            
            Tipos_de_problema__c tp0 = new Tipos_de_problema__c();
            tp0.Tipo_de_producto__c = 'Producto0';
            tp0.Tipo_de_problema__c = 'Problema0';
            tp0.Prioridad__c = 'Alta';
            tp0.Categoria__c = 'Solicitud';
            tp0.POS__c = 'Plexus';
            insert tp0;
        
            Tipos_de_problema__c tp1 = new Tipos_de_problema__c();
            tp1.Tipo_de_producto__c = 'Producto1';
            tp1.Tipo_de_problema__c = 'Problema1';
            tp1.Prioridad__c = 'Alta';
            tp1.Categoria__c = 'Solicitud';
            tp1.POS__c = 'Front';
            insert tp1;
                
            Tienda__c tienda = new Tienda__c ();
            tienda.RecordTypeId = TRegistroTienda.Id;
            tienda.Name = '0947';
            tienda.POS__c = 'Plexus';
            tienda.Zona_GR__c = 'Metro'; 
             
            insert tienda;
            Case caso = new Case();
            caso.RecordTypeId = TRegistro.Id;
            caso.NoTienda__c = tienda.Id;
            caso.Clasificacion__c = 'Solicitud';
            caso.Area_Asignacion__c = 'Soporte';
            caso.Priority = 'Alta';
            caso.TipoProblema__c = tp0.Id;
            caso.TramoDescripcion__c = 'Tramo de descripción';
            caso.Fecha_Hora_del_evento__c = Date.today();
            caso.Pasos_evento__c = 'Pasos del evento a replicar';
            caso.Resultado_esperado__c = 'Resultado esperado';
            caso.PointOfSales__c = tienda.POS__c;
            insert caso;
            
            Actividades_Plexus__c actividad = new Actividades_Plexus__c();
            actividad.Numero_de_Caso__c = caso.Id;
            actividad.area__c = 'Aplicaciones';
            actividad.TipoProblema__c = tp0.Id;
            actividad.Tramo_de_descripcion_actividad__c = 'Tramo de descripción actividad';
            actividad.Fecha_Hora_del_evento__c = Date.today();
            actividad.Pasos_evento__c = 'Pasos para replicar el evento';
            actividad.Resultado_esperado__c = 'Resultado esperado';
            actividad.Numero_de_Bug__c = '1234567890';
            
            insert actividad;
            
            
            
            Actividades_Plexus__c actividad2= new Actividades_Plexus__c();
            actividad2.Numero_de_Caso__c = caso.Id;
            actividad2.area__c = 'Aplicaciones';
            actividad2.TipoProblema__c = tp0.Id;
            actividad2.Tramo_de_descripcion_actividad__c = 'Tramo de descripción actividad';
            actividad2.Fecha_Hora_del_evento__c = Date.today();
            actividad2.Pasos_evento__c = 'Pasos para replicar el evento';
            actividad2.Resultado_esperado__c = 'Resultado esperado';
            actividad2.Numero_de_Bug__c = '1234567890';
            insert actividad2;
            
            actividad.Estatus__c = 'Resuelto';
            update actividad;
            
             actividad2.Estatus__c = 'Resuelto';
            update actividad2;
            
            actividad2.Estatus__c = 'Reincidencia';
            update actividad2;
            
    }
    Test.stopTest();
   }
}
